/*
 * This source file was generated by the Gradle 'init' task
 */
package ies.pedro;

import ies.pedro.components.*;
import ies.pedro.components.Block;
import ies.pedro.model.*;
import ies.pedro.utils.Size;

import java.io.*;

import java.util.Optional;

import javafx.application.Application;
import javafx.application.Platform;


import javafx.geometry.Point2D;
import javafx.scene.Scene;


import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;

import javafx.scene.control.SeparatorMenuItem;
import javafx.scene.image.Image;
import javafx.scene.layout.BorderPane;

import javafx.scene.layout.Pane;

import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import org.apache.xalan.processor.TransformerFactoryImpl;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import static com.google.common.io.Files.getFileExtension;

public class App extends Application {


    Scene scene;
    public static int SCALE = 3;
    public static int CELLWIDTH = 16;
    public static int CELLHEIGHT = 8;
    private final int width = 224 * SCALE;
    private final int height = 240 * SCALE;
    private final int ROWS = 29;
    private final int COLUMNS = 13;

    final FileChooser fileChooser;
    private EditorCanvas editor;
    private MediaPlayer mp;
    private LevelsPanel levelsPanel;
    private Level level;
    private Levels levels;


    public App() {
        super();
        this.level = new Level();
        this.levels = new Levels();
        fileChooser = new FileChooser();

    }


    @Override
    public void start(Stage stage) {
        BorderPane border = new BorderPane();
        border.setCenter(this.createEditor());
        border.setLeft(this.createBlockMenu());
        border.setRight(this.levelsPanel = this.createLevelPanel());
        border.setTop(this.createMenu());
        this.scene = new Scene(border, this.width + 330, this.height + 50);
        stage.setTitle("Arkanoid Level Editor: Julian Jimenez Garcia");
        stage.getIcons().add(new Image(String.valueOf(App.class.getResource("/icono.png"))));
        stage.setResizable(false);
        stage.setScene(scene);
        //para que cierre al pulsar el icono
        stage.setOnCloseRequest(t -> {
            Platform.exit();
            System.exit(0);
        });

        stage.show();
        this.editor.draw();
    }

    /**
     * Crea el panel lateral de bloques
     */
    private Pane createBlockMenu() {
        BlocksPanel b = new BlocksPanel();
        Block tb;
        String[] nombres = Block.getNamesBlocks();
        for (String nombre : nombres) {
            tb = new Block();
            tb.setTipo(nombre);
            b.addBlock(tb);
            tb.addBlocklistener(this.editor);
        }
        b.init();
        return b;
    }

    /**
     * crea el editor de nivels
     */
    private EditorCanvas createEditor() {
        this.editor = new EditorCanvas();
        this.editor.setBoard_size(new Size(this.width, this.height));
        //por los bordes da 29 filas y 13 columnas
        this.editor.setRows(ROWS);
        //por los bordes
        this.editor.setCols(COLUMNS);
        this.editor.init();
        return this.editor;
    }

    /**
     * crea el panel de niveles, con lista de niveles, botones administración y música
     */
    private LevelsPanel createLevelPanel() {
        LevelsPanel levelspanel = new LevelsPanel();
        levelspanel.init();
        levelspanel.setOnadd((s) -> {
            Level newLevel = new Level(s);
            this.level = newLevel;
            this.levels.addLevel(newLevel);
            this.editor.setLevel(newLevel);
            this.deleteMediaplayer();

        });
        levelspanel.setOndelete((s) -> {
            this.deleteMediaplayer();
            this.level = null;
            this.editor.setLevel(null);

        });
        levelspanel.setOnseleted((s) -> {
            for (Level level : this.levels.getLevels()) {
                if (level.getName().equals(s)) {
                    this.editor.setLevel(level);
                    this.deleteMediaplayer();
                }
            }

        });

        levelspanel.setOnreset(s ->
        {
            if (this.editor.getLevel() != null) {
                this.level.reset();
                //this.editor.getLevel().reset();
                this.editor.setRepaintbackground(true);
                this.editor.draw();
                this.deleteMediaplayer();
            }

        });
        levelspanel.setOnplay(() -> {
            if (this.editor.getLevel() != null) {
                //si es nulo y existe una cancion
                if ((this.mp == null && this.level.getSound() != null) || (this.mp != null && this.mp.getMedia().getSource() != this.level.getSound())) {
                    this.mp = new MediaPlayer(new Media(new File(this.level.getSound().replace("\\", "//")).toURI().toString()));
                    this.mp.setCycleCount(MediaPlayer.INDEFINITE);
                }
                if (this.mp != null) {
                    this.mp.play();
                }
            }
        });
        levelspanel.setOnpause(() -> {
            if (this.level != null && this.mp != null) {
                this.mp.pause();
            }
        });

        levelspanel.setOnstop(() -> {
            if (this.level != null && this.mp != null) {
                this.mp.stop();
            }
        });
        return levelspanel;
    }

    private MenuBar createMenu() {
        MenuBar menuBar = new MenuBar();

        Menu fileMenu = new Menu("File");
        MenuItem newMenuItem = new MenuItem("New");
        newMenuItem.setOnAction(eh -> {
            this.level.reset();
            this.editor.reset();
            this.levelsPanel.reset();
        });
        MenuItem saveLevelMenuItem = new MenuItem("Save Level");
        saveLevelMenuItem.setOnAction(actionEvent -> {
            final FileChooser fileChooser = new FileChooser();
            File file = fileChooser.showSaveDialog(scene.getWindow());
            fileChooser.getExtensionFilters().addAll(
                    new FileChooser.ExtensionFilter("XML", "*.xml"),
                    new FileChooser.ExtensionFilter("Json", "*.json"),
                    new FileChooser.ExtensionFilter("Bin", "*.bin")
            );
            if (file != null) {
                String extension = getFileExtension(file.getName());
                switch (extension) {
                    case "json":
                        level.jsonSave(file);
                        break;
                    case "xml":
                        level.xmlSave(file);
                        break;
                    default:
                        System.err.println("Ese formato no es compatible");
                        break;
                }
            }


        });
        MenuItem loadLevelMenuItem = new MenuItem("Load Level");
        loadLevelMenuItem.setOnAction(actionEvent -> {
            final FileChooser fileChooser = new FileChooser();
            fileChooser.getExtensionFilters().addAll(
                    new FileChooser.ExtensionFilter("XML", "*.xml"),
                    new FileChooser.ExtensionFilter("Json", "*.json"),
                    new FileChooser.ExtensionFilter("Bin", "*.bin")
            );
            File file = fileChooser.showOpenDialog(scene.getWindow());
            if (file != null) {
                String extension = getFileExtension(file.getName());
                switch (extension) {
                    case "json":
                        level = level.jsonLoad(file);
                        break;
                    case "xml":
                        level = level.xmlLoad(file);
                        break;
                    default:
                        System.err.println("Ese formato no es compatible");
                        break;
                }
                this.editor.setLevel(this.level);
                this.deleteMediaplayer();
                this.levels.addLevel(this.level);
                this.levelsPanel.getListlevels().getItems().add(level.getName());

            }

        });
        MenuItem saveMenuItem = new MenuItem("Save");
        saveMenuItem.setOnAction(actionEvent -> {
            final FileChooser fileChooser = new FileChooser();
            File file = fileChooser.showSaveDialog(scene.getWindow());
            fileChooser.getExtensionFilters().addAll(
                    new FileChooser.ExtensionFilter("XML", "*.xml"),
                    new FileChooser.ExtensionFilter("Json", "*.json"),
                    new FileChooser.ExtensionFilter("Bin", "*.bin")
            );
            if (file != null) {
                String extension = getFileExtension(file.getName());
                switch (extension) {
                    case "json":
                        levels.jsonSave(file);
                        break;
                    case "xml":
                        levels.xmlSave(file);
                        break;
                    default:
                        System.err.println("Ese formato no es compatible");
                        break;
                }
            }


        });
        MenuItem loadMenuItem = new MenuItem("Load");
        loadMenuItem.setOnAction(actionEvent -> {
            final FileChooser fileChooser = new FileChooser();
            fileChooser.getExtensionFilters().addAll(
                    new FileChooser.ExtensionFilter("XML", "*.xml*"),
                    new FileChooser.ExtensionFilter("Json", "*.json"),
                    new FileChooser.ExtensionFilter("Bin", "*.bin")
            );
            File file = fileChooser.showOpenDialog(scene.getWindow());
            if (file != null) {
                String extension = getFileExtension(file.getName());
                switch (extension) {
                    case "json":
                        levels = levels.jsonLoad(file);
                        break;
                    case "xml":
                        levels = levels.xmlLoad(file);
                        break;
                    default:
                        System.err.println("Ese formato no es compatible");
                        return;
                }

                levelsPanel.reset();
                for (Level level : levels.getLevels()) {
                    levelsPanel.getListlevels().getItems().add(level.getName());
                }
            }
        });
        Menu optionsMenu = new Menu("Options");
        MenuItem soundMenu = new MenuItem("Sound");
        optionsMenu.getItems().add(soundMenu);
        soundMenu.setOnAction(actionEvent -> {
            final FileChooser fileChooser = new FileChooser();
            fileChooser.getExtensionFilters().addAll(
                    new FileChooser.ExtensionFilter("mp3", "*.mp3*")

            );
            File file = fileChooser.showOpenDialog(scene.getWindow());
            if (file != null) {
                this.level.setSound(file.getAbsolutePath());
                this.editor.getLevel().setSound(file.getAbsolutePath());
                if (this.mp != null)
                    this.mp.stop();

            }

        });
        MenuItem backgroundMenu = new MenuItem("Background");
        optionsMenu.getItems().add(backgroundMenu);
        backgroundMenu.setOnAction(actionEvent -> {
            DialogBackground db = new DialogBackground();
            db.init();
            Optional<Point2D> result = db.showAndWait();
            if (result.isPresent()) {
                result.get();
                if (this.editor.getLevel() != null) {

                    this.editor.getLevel().setBackgroundPosition(result.get());
                    this.editor.setRepaintbackground(true);
                    this.editor.draw();
                }
            }
        });


        MenuItem timeMenu = new MenuItem("Time");
        timeMenu.setOnAction(eh -> {
            DialogTime dt = new DialogTime();
            dt.init();
            Optional<Double> result = dt.showAndWait();
            if (result.isPresent()) {
                result.get();
                if (this.editor.getLevel() != null) {
                    this.editor.getLevel().setTime(result.get());
                }
            }

        });

        MenuItem xmlToHMTLLevelMenuItem = new MenuItem("Level XMLToHTML");
        xmlToHMTLLevelMenuItem.setOnAction(actionEvent -> {
            final FileChooser fileChooser = new FileChooser();
            fileChooser.getExtensionFilters().addAll(
                    new FileChooser.ExtensionFilter("XML", "*.xml*"),
                    new FileChooser.ExtensionFilter("Json", "*.json"),
                    new FileChooser.ExtensionFilter("Bin", "*.bin")
            );
            File xmlFile = fileChooser.showOpenDialog(scene.getWindow());
            if (xmlFile != null) {
                File xslFile = new File("src/main/resources/archivoXslt.xsl");

                try {
                    TransformerFactory factory = new TransformerFactoryImpl();
                    StreamSource xslt = new StreamSource(xslFile);
                    Transformer transformer = factory.newTransformer(xslt);
                    StreamSource xml = new StreamSource(xmlFile);
                    StreamResult salida = new StreamResult(new File(xmlFile.getParent(), "archivo.html"));
                    transformer.transform(xml, salida);

                    System.out.println("Transformación completada. El archivo HTML ha sido generado: " + salida.getSystemId());
                } catch (TransformerException e) {
                    e.printStackTrace();

                }
            }
        });
        MenuItem xmlToHMTLLevelsMenuItem = new MenuItem("Levels XMLToHTML");
        xmlToHMTLLevelsMenuItem.setOnAction(actionEvent -> {
            final FileChooser fileChooser = new FileChooser();
            fileChooser.getExtensionFilters().addAll(
                    new FileChooser.ExtensionFilter("XML", "*.xml*"),
                    new FileChooser.ExtensionFilter("Json", "*.json"),
                    new FileChooser.ExtensionFilter("Bin", "*.bin")
            );
            File xmlFile = fileChooser.showOpenDialog(scene.getWindow());
            if (xmlFile != null) {
                File xslFile = new File("src/main/resources/archivoXsltLevels.xsl");

                try {
                    TransformerFactory factory = new TransformerFactoryImpl();
                    StreamSource xslt = new StreamSource(xslFile);
                    Transformer transformer = factory.newTransformer(xslt);
                    StreamSource xml = new StreamSource(xmlFile);
                    StreamResult salida = new StreamResult(new File(xmlFile.getParent(), "archivoLevels.html"));
                    transformer.transform(xml, salida);

                    System.out.println("Transformación completada. El archivo HTML ha sido generado: " + salida.getSystemId());
                } catch (TransformerException e) {
                    e.printStackTrace();

                }
            }

        });
        optionsMenu.getItems().add(timeMenu);

        MenuItem exitMenuItem = new MenuItem("Salir");
        exitMenuItem.setOnAction(actionEvent -> Platform.exit());

        fileMenu.getItems().addAll(newMenuItem, saveLevelMenuItem, saveMenuItem, loadLevelMenuItem, loadMenuItem, xmlToHMTLLevelMenuItem, xmlToHMTLLevelsMenuItem,
                new SeparatorMenuItem(), exitMenuItem);

        menuBar.getMenus().addAll(fileMenu, optionsMenu);//, webMenu, sqlMenu);
        return menuBar;
    }

    private void deleteMediaplayer() {
        if (this.mp != null) {
            this.mp.stop();
            this.mp = null;
        }
    }
}
